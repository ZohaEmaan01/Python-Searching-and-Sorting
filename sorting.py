# -*- coding: utf-8 -*-
"""sorting

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RN1Cb52TCzvd-5kk6SXAjU53q-zx0ROk
"""

AUTHOR='Zoha Emaan'
Degree='DS'

"""
 Bubble sort compares adjacent elements and swaps them if they are in the wrong order, bubbling the largest unsorted element to its correct position in each iteration.

 Parameters: arr- The list given as input for sorting.

 Returns: The sorted list.
"""
def bubble_sort(arr):
  n=len(arr)
  for i in range(n):
    swap=False
    for j in range(0, n-i-1):
      if arr[j]>arr[j+1]:
        arr[j],arr[j+1]=arr[j+1],arr[j]
        swap=True
    if not swap:
      break
  return arr

"""
 Selection sort repeatedly finds the minimum element from the unsorted part of the list and swaps it with the first unsorted element.

 Parameters: arr- The list given as input for sorting.

 Returns: The sorted list.
"""
def selection_sort(arr):
  n=len(arr)
  for i in range(n):
    min_index=i
    for j in range(i+1,n):
      if arr[j]<arr[min_index]:
        min_index=j
    arr[i],arr[min_index]=arr[min_index],arr[i]
  return arr

"""
 Insertion sort builds the final sorted list one element at a time by inserting each element into its correct position in the sorted part of the list.

 Parameters: arr- The list given as input for sorting.

 Returns: The sorted list.
"""
def insertion_sort(arr):
    for i in range(1,len(arr)):
        key=arr[i]
        j=i-1
        while j>=0 and key<arr[j]:
            arr[j + 1]=arr[j]
            j-=1
        arr[j+1]=key
    return arr

"""
 Merge sort divides the list into two halves, recursively sorts the halves, and then merges them back together in sorted order.

 Parameters: arr- The list given as input for sorting.

 Returns: The sorted list.
"""
def merge_sort(arr):
    if len(arr)<=1:
        return arr
    mid=len(arr)//2
    left_side=arr[:mid]
    right_side=arr[mid:]

    left_side=merge_sort(left_side)
    right_side=merge_sort(right_side)

    return merge(left_side,right_side)

def merge(left,right):
    array=[]
    left_index=0
    right_index=0
    while left_index<len(left) and right_index<len(right):
        if left[left_index]<right[right_index]:
            array.append(left[left_index])
            left_index+=1
        else:
            array.append(right[right_index])
            right_index+=1
    array.extend(left[left_index:])
    array.extend(right[right_index:])
    return array

"""
 Quick sort selects a pivot element and partitions the list into two sublists, one with elements less than the pivot and one with elements greater than the pivot, and then recursively sorts the sublists.

 Parameters: arr- The list given as input for sorting.

 Returns: The sorted list.
"""
def quick_sort(arr):
  if len(arr)<=1:
    return arr
  pivot=arr[len(arr)//2]
  left=[x for x in arr if x<pivot]
  middle=[x for x in arr if x==pivot]
  right=[x for x in arr if x>pivot]
  return quick_sort(left)+middle+quick_sort(right)