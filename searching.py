# -*- coding: utf-8 -*-
"""searching

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19AyvTyRIPJVpW4G57UEXdfNfupOXHF35
"""

AUTHOR='Zoha Emaan'
Degree='DS'

"""
    Linear search iterates through the list one item at a time until the target element is found or the end of the list is reached.

    Parameters: arr- The list to search.
                number- The element to search for.

    Returns: The index of the target element if found, otherwise -1.
"""
def linear_search(arr,number):
    for i in range(len(arr)):
        if arr[i]==number:
            return i
    return -1

"""
    Binary search divides the sorted list into halves and repeatedly narrows down the search interval by comparing the target value with the middle element of the list.

    Parameters: arr- The list to search.
                number- The element to search for.

    Returns: The index of the target element if found, otherwise -1.
"""
def binary_search(arr,number):
  left=0
  right=len(arr)-1
  while left<=right:
    mid=left+(right-left)//2
    if arr[mid]==number:
      return mid
    elif arr[mid]<number:
      left=mid+1
    else:
      right=mid-1
  return -1

"""
    Interpolation search estimates the position of the target value based on the values at the ends of the list and performs binary search accordingly.

    Parameters: arr- The list to search.
                number- The element to search for.

    Returns: The index of the target element if found, otherwise -1.
"""
def interpolation_search(arr,number):
  low=0
  high=len(arr)-1
  while low<=high and arr[low]<=number<=arr[high]:
    pos=low+(high-low)//(arr[high]-arr[low]*(number-arr[low]))

    if arr[pos]==number:
      return pos
    elif arr[pos]<number:
      low=pos+1
    else:
      high=pos-1
  return -1

"""
      Exponential search doubles the size of the search interval starting from 1 until a range larger than the target value is found, then performs binary search within that interval.

      Parameters: arr- The list to search.
                number- The element to search for.

      Returns: The index of the target element if found, otherwise -1.
"""
def exponential_search(arr,number):
    if arr[0]==number:
        return 0

    n=len(arr)
    i=1
    while i<n and arr[i]<=number:
        i*=2
    return binary_search(arr[:min(i,n)],number)
"""
      Jump search jumps ahead by fixed steps to reduce the number of elements to be checked linearly, and then performs linear search on the smaller interval.

      Parameters: arr- The list to search.
                number- The element to search for.

      Returns: The index of the target element if found, otherwise -1.
"""
def jump_search(arr,number):
    n=len(arr)
    step=1
    while step*step<n:
        step+=1
    step-=1

    prev=0
    current=0

    while current<n and arr[current]<number:
        prev=current
        current=min(current+step,n-1)

    for i in range(prev,current+1):
        if arr[i]==number:
            return i
    return -1